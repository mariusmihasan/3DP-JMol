# This is the initial loading and preparation of the molecule.
# Loading will be done by the website (how?). A decision is needed for the Hydrogens.
#Load=2hhb
load :aspirin
SET pdbAddHydrogens
delete water

#This is the place where we are going to colect and list all technical variables related to the 3d-printers, dimensions, etc. These are important for calculations and we need to put them here in order to be able to change them quickly
 
var JMolStlScale = 10; # Jmol exports 1 A as 10 mm. This means that all dimesnions in Jmol are exported 10x larger. We will work with A, but always multiply the final resuls in mm with this. Scale needs to be devided??? by this. We will keep it here for reference and in case JMol changes this in the future

var MinPrintedObjDimen = 3; # minimum printed dimension of an object (bond, atom, thikness). In the paper is 2.6 but will start with 3 mm

var PrintBedMinDimension = 210 / JMolStlScale; # Introduce the PrintBedMinDimension variable. This is the minimum dimension (X, Y, or Z) of the print bed in mm and corrected for A. For now, it is set manually in the script here, but it might be advisable/required to have a way of setting it from the browser. 

#Thresholds for scale (var PrintScaleFactor) for each rendering scheme if required

#Ball and stick
var MaxPrintScaleFactorBallStick = 1.36 / MinPrintedObjDimen; #soemthing i fail to understand in the Math here, need to check and investigate, needs validation by printing. 1.36 is the C diameter at max 40%vWr that still allows atoms to be separated.
var MinPrintScaleFactorBallStick = (2 * MinPrintedObjDimen) / (2.86 * JMolStlScale); # where 2.86 is the length of a C-C + peptide bonds - based on Math, needs validation by printing

#Sticks - aka backbone -- wil continue here
var MaxPrintScaleFactorBackbone = MaxPrintScaleFactorBallStick; #temporary, needs math
var MinPrintScaleFactorBackbone = 1; #temporary, from the paper, needs math

# Calculate  the bounding box X,Y,Z dimensions and) identify the largest dimension as a base for the scaling factor.
# Enable the bounding box
boundbox on;
refresh;

# Retrieve bounding box properties
var centerStr = getProperty("boundBoxInfo", "center");
var corner0Str = getProperty("boundBoxInfo", "corner0");
var corner1Str = getProperty("boundBoxInfo", "corner1");
var vectorStr = getProperty("boundBoxInfo", "vector");

# Convert extracted properties into numerical arrays
var center = [ centerStr.x, centerStr.y, centerStr.z ];
var corner0 = [ corner0Str.x, corner0Str.y, corner0Str.z ];
var corner1 = [ corner1Str.x, corner1Str.y, corner1Str.z ];
var vector = [ vectorStr.x, vectorStr.y, vectorStr.z ];

# Ensure the values are retrieved before proceeding
if (center == null || corner0 == null || corner1 == null || vector == null) {
  print "ERROR: Bounding box data not retrieved.";
  exit;
}

# Calculate dimensions using vector
var length = 2 * vector[0];  # X-axis (width)
var height = 2 * vector[1];  # Y-axis (height)
var depth = 2 * vector[2];   # Z-axis (depth)

# Alternative method (sanity check)
var length_check = corner1[0] - corner0[0];
var height_check = corner1[1] - corner0[1];
var depth_check = corner1[2] - corner0[2];

# Ensure consistency
if (abs(length - length_check) > 0.1 || abs(height - height_check) > 0.1 || abs(depth - depth_check) > 0.1) {
    length = length_check;
    height = height_check;
    depth = depth_check;
}

# Calculate volume
var volume = length * height * depth;

# Determine the largest dimension
var maxDim = length;
var maxLabel = "Length";

if (height > maxDim) {
    maxDim = height;
    maxLabel = "Height";
}
if (depth > maxDim) {
    maxDim = depth;
    maxLabel = "Depth";
}
# The largest dimension as maxDim calculation is complete. Next is to calculate the maximum print scale (MaxPrintScale), which is dependent on the minimum print bed dimension (X, Y, or Z) 

# Calculate MaxPrintScale - largest scale at which the model can be printed
var MaxPrintScale = (PrintBedMinDimension / maxDim)*100;

# Calculate MaxPrintScaleFactor - planned to be used for scaling dimensions later. Same as MaxPrintScale, but not in %
var MaxPrintScaleFactor = PrintBedMinDimension / maxDim;

# Calculate MinPrintScale - the smallest scale at which the model can be printed (MinPrintScale), which will be dependent on the rendering style 
var MinPrintScale = MinPrintScaleFactorBallStick*100; #temporary, will need to implement a function for each style of visualisation

# Calculate MinPrintScaleFactor - planned to be used for scaling dimensions later. Same as MinPrintScale, but not in %
var MinPrintScaleFactor = MinPrintScaleFactorBallStick; #temporary, will need to implement a function for each style of visualisation

#setting up the print scale (PrintScaleFactor)
var PrintScaleFactor = MaxPrintScaleFactor; #will continue with the largest but maybe it is good to either have have a way o recomanding a suitable PrintScaleFactor based on the Min and Max, or user input

# Display results in the console (needs to be edited in the final version of the script for debugging.
print "Maximum dimension of the boundbox:";
print maxLabel + " = " + maxDim + " Å";
print "Volume = " + volume + " Å³";
# - just to check calculations and always understand the difference and have ready values for MaxPrintScale, MaxPrintScaleFactor, MinPrintScale, MinPrintScaleFactor
print "MaxPrint Scale Factor: " + MaxPrintScaleFactor;
print "MinPrint Scale Factor: " + MinPrintScaleFactor;
print "MaxPrintScaleFactorBallStick: " + MaxPrintScaleFactorBallStick;
print "MinPrintScaleFactorBallStick: " + MinPrintScaleFactorBallStick;
print "----------------------------------------------";
print "--- Start for 3D Printing RECOMMENDATIONS ----";

# rounding up scale values for display
var MaxPrintScale_round = point(MaxPrintScale + 0.5);    # rounding up
var MinPrintScale_round = point(MinPrintScale + 0.5);    # rounding up

# text here needs to be edited depending on the final decision on how the var PrintBedMinDimension and PrintScaleFactor will be implemented (fixed or user selectable)

print "Rendering and printing recommendations are provided for a medium size (ie. Ender 3; Prusa MK3S+) FDM 3D printer. Using SLA printers is possible, but not yet tested.";

# Print recommendations based on the PrintScale value. I have set up some thresholds listed above, in the technical specs section. 0.3 is random and needs to be modified

if (PrintScaleFactor > MaxPrintScaleFactorBallStick) {
    print "Your molecule is rather small. All renderings are suitable. It can be printed at a maximum print scale of " + MaxPrintScale_round + " % or a minimum print scale of " + MinPrintScale_round + " %";
} else if (PrintScaleFactor >= MinPrintScaleFactorBackbone) {
    print "Your molecule is medium sized. Only printing it as a cartoon or surface is recommended at a maximum prin scale of " + MaxPrintScale_round + " % or a minimum print scale of ..needs to be determine....";
} else {
    print "Your molecule is rather large. We need to look better into this.";
}

# Output approximate real-world print dimensions in mm at MaxPrintScale 
# Compute raw values first
var max_length_raw = length * MaxPrintScaleFactor * JMolStlScale;
var max_height_raw = height * MaxPrintScaleFactor * JMolStlScale;
var max_depth_raw = depth * MaxPrintScaleFactor * JMolStlScale;
# Round values to the nearest integer
var max_length_mm = point(max_length_raw + 0.5);  # rounding up
var max_height_mm = point(max_height_raw + 0.5);  # rounding up
var max_depth_mm = point(max_depth_raw + 0.5);    # rounding up
print "Printed at the maximum allowed printing scale of " + MaxPrintScale_round + " % , your model will be approx " + max_length_mm + " mm x " + max_height_mm + " mm x " + max_depth_mm + " mm.";

# Output approximate real-world print dimensions in mm at MinPrintScale 
# Compute raw values first
var min_length_raw = length * MinPrintScaleFactor * JMolStlScale;
var min_height_raw = height * MinPrintScaleFactor * JMolStlScale;
var min_depth_raw = depth * MinPrintScaleFactor * JMolStlScale;
# Round values to the nearest integer
var min_length_mm = point(min_length_raw + 0.5);  # rounding up
var min_height_mm = point(min_height_raw + 0.5);  # rounding up
var min_depth_mm = point(min_depth_raw + 0.5);    # rounding up
print "Printed at the minimum printing scale of " + MinPrintScale_round + " % , your model will be approx " + min_length_mm + " mm x " + min_height_mm + " mm x " + min_depth_mm + " mm.";

print "--- End for 3D Printing RECOMMENDATIONS ----";
print "--------------------------------------------";

print "Rendering molecule based on the PrintScaleFactor = MaxPrintScaleFactor; All models are rendered to be printed at the indicated maximum printing scale, not lower. Will try to implement scale sugestions or user selectable scales later";
#first attempts to scale items in JMol based on PrintScaleFactor. Math is not right, but the scripting works
# Compute the spacefill size as a percentage
var spacefill_size = PrintScaleFactor * 23;   # Convert to percentage (0.23 * 100)

# Round to the nearest integer using Jmol's point() function
var spacefill_percent = point(spacefill_size + 0.5);

# Directly apply the spacefill size (without eval)
spacefill @spacefill_percent%;

# Display the measurements in the Jmol window - does not work yet, will deal with it later
#set echo top center;
#echo "Bounding Box Measurements:";
#echo maxLabel + " = " + maxDim + " Å";
#echo "Volume = " + volume + " Å³";
Write script_latest_run.stl
