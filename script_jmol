# This is the initial loading and preparation of the molecule.
# Loading will be done by the website (how?). A decision is needed for the Hydrogens.
Load=2hhb
SET pdbAddHydrogens
delete water

# Calculate  the bounding box X,Y,Z dimensions and identify the largest dimension as a base for the scaling factor.
# Enable the bounding box
boundbox on;
refresh;

# Retrieve bounding box properties
var centerStr = getProperty("boundBoxInfo", "center");
var corner0Str = getProperty("boundBoxInfo", "corner0");
var corner1Str = getProperty("boundBoxInfo", "corner1");
var vectorStr = getProperty("boundBoxInfo", "vector");

# Convert extracted properties into numerical arrays
var center = [ centerStr.x, centerStr.y, centerStr.z ];
var corner0 = [ corner0Str.x, corner0Str.y, corner0Str.z ];
var corner1 = [ corner1Str.x, corner1Str.y, corner1Str.z ];
var vector = [ vectorStr.x, vectorStr.y, vectorStr.z ];

# Ensure the values are retrieved before proceeding
if (center == null || corner0 == null || corner1 == null || vector == null) {
  print "ERROR: Bounding box data not retrieved.";
  exit;
}

# Calculate dimensions using vector
var length = 2 * vector[0];  # X-axis (width)
var height = 2 * vector[1];  # Y-axis (height)
var depth = 2 * vector[2];   # Z-axis (depth)

# Alternative method (sanity check)
var length_check = corner1[0] - corner0[0];
var height_check = corner1[1] - corner0[1];
var depth_check = corner1[2] - corner0[2];

# Ensure consistency
if (abs(length - length_check) > 0.1 || abs(height - height_check) > 0.1 || abs(depth - depth_check) > 0.1) {
    length = length_check;
    height = height_check;
    depth = depth_check;
}

# Calculate volume
var volume = length * height * depth;

# Determine the largest dimension
var maxDim = length;
var maxLabel = "Length";

if (height > maxDim) {
    maxDim = height;
    maxLabel = "Height";
}
if (depth > maxDim) {
    maxDim = depth;
    maxLabel = "Depth";
}
# The largest dimension as maxDim calculation is complete. Next is to calculate the maximum print scale (MaxPrintScale), which is dependent on the minimum print bed dimension (X, Y, or Z) 

# Introduce the PrintBedMinDimension variable. This is the minimum dimension (X, Y, or Z) of the print bed. For now, it is set manually in the script, but it might be advisable/required to have a way of setting it from the browser.  
var PrintBedMinDimension = 210;

# Calculate MaxPrintScale - need to decide if it is useful to have an input from a user here
var MaxPrintScale = (PrintBedMinDimension / (maxDim * 10))*100;

# Calculate PrintScaleFactor - planned to be used for scaling dimensions later. Same as MaxPrintScale, but not in %
var PrintScaleFactor = PrintBedMinDimension / (maxDim * 10);

# Display results in the console (needs to be edited and only the MaxPrintScale displayed in the final version of the script. Will keep the rest for now for debugging.
print "Maximum dimension of the boundbox:";
print maxLabel + " = " + maxDim + " Å";
print "Volume = " + volume + " Å³";
# text here only for debugging, can be removed later - just to check calculations and always understand the difference and have ready values for MaxPrintScale and PrintScaleFactor
print "Print Scale Factor: " + PrintScaleFactor;
print "----------------------------------------------";
print "--- Start for 3D Printing RECOMMENDATIONS ----";
# text here needs to be edited depending on the final decision on how the var PrintBedMinDimension will be implemented (fixed or user selectable)
var MaxPrintScale_round = point(MaxPrintScale + 0.5);    # rounding up
print "Maximum printing scale to fit on a medium size (ie. Ender 3; Prusa MK3S+) 3D printer = " + MaxPrintScale_round + " %";

# Output approximate real-world print dimensions at MaxPrintScale 
# Compute raw values first
var length_raw = length * PrintScaleFactor * 10;
var height_raw = height * PrintScaleFactor * 10;
var depth_raw = depth * PrintScaleFactor * 10;
# Round values to the nearest integer
var length_mm = point(length_raw + 0.5);  # rounding up
var height_mm = point(height_raw + 0.5);  # rounding up
var depth_mm = point(depth_raw + 0.5);    # rounding up
print "At the indicated prin scale, your model will be approx " + length_mm + " mm x " + height_mm + " mm x " + depth_mm + " mm.";

# Print recommendations based on the MaxPrintScale value. I have set up some thresholds based on the  PrintScaleFactor. 0.65 is calculated, should be ok, 0.3 is random and needs to be modified
if (PrintScaleFactor > 0.65) {
    print "Your molecule is rather small. All renderings are suitable. We recommend printing it at " + MaxPrintScale_round + " %" or higher.";
} else if (PrintScaleFactor >= 0.3) {
    print "Your molecule is rather large. Only printing it as a cartoon or surface is recommended at " + MaxPrintScale + " % or lower.";
} else {
    print "Your molecule is rather large. We need to look better into this.";
}

print "--- End for 3D Printing RECOMMENDATIONS ----";
print "--------------------------------------------";
# Display the measurements in the Jmol window - does not work yet, will deal with it later
#set echo top center;
#echo "Bounding Box Measurements:";
#echo maxLabel + " = " + maxDim + " Å";
#echo "Volume = " + volume + " Å³";
Write script_latest_run.stl
